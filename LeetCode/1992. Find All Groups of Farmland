### Problem 1992: Find All Groups of Farmland
https://leetcode.com/problems/find-all-groups-of-farmland/submissions/1237353665?envType=daily-question&envId=2024-04-20

#### Overview:
Problem 1992 tasks us with identifying groups of farmland in a binary matrix. Each group represents a rectangular area consisting entirely of farmland, and no two groups are adjacent. We are required to find the coordinates of the top left and bottom right corners of each group.

#### Approach:
To solve this problem, we can traverse the binary matrix and perform a depth-first search (DFS) whenever we encounter a cell with value `1`. During the DFS, we mark the visited cells as `0` to avoid revisiting them. We keep track of the top left and bottom right corners of each group encountered.

#### Python3 Solution with Annotations:
```python
class Solution:
    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:
        def dfs(row, col):
            # Mark the current cell as visited
            land[row][col] = 0
            # Update the bottom right corner
            bottom_right[0] = max(bottom_right[0], row)
            bottom_right[1] = max(bottom_right[1], col)
            # Explore adjacent cells
            for dr, dc in directions:
                new_row, new_col = row + dr, col + dc
                if 0 <= new_row < m and 0 <= new_col < n and land[new_row][new_col] == 1:
                    dfs(new_row, new_col)

        # Initialize variables
        m, n = len(land), len(land[0])
        groups = []
        directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]

        # Traverse the matrix
        for i in range(m):
            for j in range(n):
                if land[i][j] == 1:
                    top_left = [i, j]
                    bottom_right = [i, j]
                    dfs(i, j)
                    groups.append([top_left[0], top_left[1], bottom_right[0], bottom_right[1]])

        return groups
```

#### Explanation:
- We define a nested function `dfs` to perform a depth-first search from a given cell `(row, col)`.
- During the DFS, we update the bottom right corner coordinates of the current group.
- We traverse the matrix and initiate a DFS whenever we encounter a cell with value `1`.
- After DFS, we append the coordinates of the top left and bottom right corners to the `groups` list.

#### Quality Assurances:
- **Correctness**: The solution accurately identifies all groups of farmland.
- **Efficiency**: The time complexity is proportional to the number of cells in the matrix.
- **Robustness**: The solution handles edge cases such as empty matrix or single-cell farmland.

#### Test Cases:
- **Example 1:**
  - Input: `[[1,0,0],[0,1,1],[0,1,1]]`
  - Output: `[[0,0,0,0],[1,1,2,2]]`
- **Example 2:**
  - Input: `[[1,1],[1,1]]`
  - Output: `[[0,0,1,1]]`
- **Example 3:**
  - Input: `[[0]]`
  - Output: `[]`

#### Conclusion:
Problem 1992 showcases the use of depth-first search (DFS) for identifying groups of farmland in a binary matrix. By efficiently traversing the matrix and tracking the coordinates of each group, we can accurately determine the rectangular areas of farmland. This solution demonstrates the practical application of graph traversal algorithms in solving real-world spatial analysis problems.

