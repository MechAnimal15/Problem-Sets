**Problem 1581: Customer Who Visited but Did Not Make Any Transactions**
https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions/submissions/1242627538?source=submission-ac


**Problem Overview:**
Problem 1581, "Customer Who Visited but Did Not Make Any Transactions," requires identifying customers who visited a mall but did not make any transactions during their visit. This involves analyzing two tables: "Visits" and "Transactions." The "Visits" table contains data about customers who visited the mall, while the "Transactions" table records transactions made during those visits. The goal is to return the IDs of customers who visited but made no transactions, along with the count of such visits for each customer.

**Approach:**
To solve this problem, we can utilize a SQL query that combines the data from the "Visits" and "Transactions" tables. By performing a left join and filtering out the visits with associated transactions, we can isolate the visits where no transactions were made. Subsequently, we can group the results by customer ID and count the number of visits without transactions for each customer.

**MS SQL Server Solution:**
```sql
  SELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans 
  FROM Visits v 
  LEFT JOIN Transactions t 
  ON v.visit_id = t.visit_id  
  WHERE t.transaction_id IS NULL 
  GROUP BY v.customer_id;
```

**Explanation:**
  - The SQL query selects the customer ID from the "Visits" table and counts the visit IDs associated with each customer, aliasing the count as "count_no_trans."
  - It performs a left join between the "Visits" table (aliased as "v") and the "Transactions" table (aliased as "t") based on the visit ID.
  - The WHERE clause filters out rows where the transaction ID is NULL, indicating no transactions were made during the visit.
  - Finally, the results are grouped by customer ID using the GROUP BY clause.

**Quality Assurances:**
    - The SQL query is designed to accurately identify customers who visited without making any transactions.
  - It ensures that each visit is counted only once, even if multiple transactions occurred during the visit.
  - The left join guarantees that all visits are included in the results, even if there are no corresponding transactions.
  
**Test Cases:**
- **Input:**
  ```sql
  Visits:
  +----------+-------------+
  | visit_id | customer_id |
  +----------+-------------+
  | 1        | 23          |
  | 2        | 9           |
  | 4        | 30          |
  | 5        | 54          |
  | 6        | 96          |
  | 7        | 54          |
  | 8        | 54          |
  +----------+-------------+

  Transactions:
  +----------------+----------+--------+
  | transaction_id | visit_id | amount |
  +----------------+----------+--------+
  | 2              | 5        | 310    |
  | 3              | 5        | 300    |
  | 9              | 5        | 200    |
  | 12             | 1        | 910    |
  | 13             | 2        | 970    |
  +----------------+----------+--------+
  ```
- **Output:**
  ```sql
  +-------------+----------------+
  | customer_id | count_no_trans |
  +-------------+----------------+
  | 30          | 1              |
  | 96          | 1              |
  | 54          | 2              |
  +-------------+----------------+
  ```

**Conclusion:**
The provided SQL query effectively identifies customers who visited the mall but did not make any transactions. By leveraging a left join and filtering out visits with associated transactions, the query accurately calculates the count of such visits for each customer. This solution ensures efficiency, accuracy, and reliability in identifying customers with specific visit behavior.

