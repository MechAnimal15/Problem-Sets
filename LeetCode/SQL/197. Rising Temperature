### Problem 197: Rising Temperature
https://leetcode.com/problems/rising-temperature/submissions/1243457940?envType=study-plan-v2&envId=top-sql-50


**Problem Statement:**
Given a table `Weather` with columns `id`, `recordDate`, and `temperature`, representing daily temperature records, the task is to find all dates' IDs with higher temperatures compared to the previous dates. The result table should be returned in any order.

**Original SQL Solution:**
  ```sql
    SELECT w1.id
    FROM Weather w1
    JOIN Weather w2 ON w1.recordDate = DATEADD(day, 1, w2.recordDate)
    WHERE w1.temperature > w2.temperature;
  ```

**Revised SQL Solution (After LeetCode Editorial):**

  ```sql
    /*
    This solution utilizes a Common Table Expression (CTE) with window functions to 
    identify days with rising temperatures by comparing each day's temperature with 
    that of the previous day.
    */
    
    WITH PreviousWeatherData AS
    (
        SELECT 
            id,
            recordDate,
            temperature, 
            LAG(temperature, 1) OVER (ORDER BY recordDate) AS PreviousTemperature,
            LAG(recordDate, 1) OVER (ORDER BY recordDate) AS PreviousRecordDate
        FROM 
            Weather
    )
    SELECT 
        id 
    FROM 
        PreviousWeatherData
    WHERE 
        temperature > PreviousTemperature
    AND 
        recordDate = DATEADD(day, 1, PreviousRecordDate);
  ```

**Explanation:**
The original solution employs a self-join on the `Weather` table to create pairs of consecutive days and compares each day's temperature with that of the previous day to identify days with rising temperatures.

In contrast, the revised solution utilizes a Common Table Expression (CTE) with window functions to achieve the same result. While the revised solution may have a slightly longer runtime, it offers benefits such as improved readability, scalability, and ease of maintenance.

**Quality Assurances:**
  - **Correctness:** Both solutions have been rigorously tested against various test cases to ensure correctness.
  - **Readability:** The revised solution, despite its longer runtime, offers improved readability due to the use of window functions and a Common Table Expression.
  - **Scalability:** The revised solution is generally more scalable and efficient, especially for handling large datasets, compared to the original self-join approach.
  - **Portability:** Depending on the SQL database system being used, the revised solution with window functions may be more widely supported and portable across different platforms.

**Conclusion:**
While the revised solution may have a slightly longer runtime compared to the original solution, its benefits in terms of readability, scalability, and ease of maintenance make it a preferable choice in many cases. However, it's essential to consider the specific requirements and constraints of the problem and the system in which the solution will be deployed before making a final decision.

