## LeetCode Problem #623: Add One Row to Tree
https://leetcode.com/problems/add-one-row-to-tree/submissions/1234213442?envType=daily-question&envId=2024-04-16

### Problem Description:
Given the root of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.

Note that the root node is at depth 1.

The adding rule is:

- Given the integer `depth`, for each non-null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.
- `cur`'s original left subtree should be the left subtree of the new left subtree root.
- `cur`'s original right subtree should be the right subtree of the new right subtree root.
- If `depth == 1`, meaning there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree becomes the new root's left subtree.

### Example Test Cases:
- Example 1:
  - Input: root = [4,2,6,3,1,5], val = 1, depth = 2
  - Output: [4,1,1,2,null,null,6,3,1,5]
- Example 2:
  - Input: root = [4,2,null,3,1], val = 1, depth = 3
  - Output: [4,2,null,1,1,3,null,null,1]

### Approach:
Utilize a depth-first traversal to traverse the tree until reaching the desired depth. At the target depth, insert new nodes with the given value, adjusting the pointers accordingly to maintain the tree structure.

### Python3 Code Implementation:
```python
class Solution:
    def addOneRow(self, root: TreeNode, val: int, depth: int) -> TreeNode:
        if depth == 1:
            new_root = TreeNode(val)
            new_root.left = root
            return new_root
        self.add(root, val, depth)
        return root
    
    def add(self, node, val, depth):
        if not node:
            return
        if depth == 2:
            temp = node.left
            node.left = TreeNode(val)
            node.left.left = temp
            temp = node.right
            node.right = TreeNode(val)
            node.right.right = temp
        else:
            self.add(node.left, val, depth - 1)
            self.add(node.right, val, depth - 1)
```

### Complexity Analysis:
- Time Complexity: O(n), where n is the number of nodes in the binary tree.
- Space Complexity: O(h), where h is the height of the binary tree.
